#!/usr/bin/env node

const common = require('./common');
const fs = require('fs').promises;

const isStaging = process.argv.includes('--staging') || (!!process.env.CF_PAGES && process.env.CF_PAGES_BRANCH !== 'main');

console.log(`Building for ${isStaging ? 'staging' : 'production'}...`);
async function buildHugo() {
  const extraArgs = '--enableGitInfo --minify --cleanDestinationDir'.split(' ');

  if (isStaging) {
    extraArgs.push('--environment', 'staging', '--buildDrafts', '--buildFuture');

    if (!!process.env.CF_PAGES) {
      extraArgs.push('--baseURL', process.env.CF_PAGES_URL);
    }
  } else {
    extraArgs.push('--environment', 'production');
    extraArgs.push('--baseURL', 'https://blog.miu.guru/');
  }

  const [procName] = common.runProcess('hugo', extraArgs);

  await Promise.all([
    common.waitForProcess(procName),
    common.waitForFile('public/index.html'),
  ]);
}

async function buildSearch() {
  const [procName] = common.runProcess('pagefind', ['--site', 'public']);

  await Promise.all([
    common.waitForProcess(procName),
    common.waitForFile('public/pagefind/pagefind.js'),
  ]);
}

async function main() {
  if (isStaging) {
    // checkout master
    await common.runCommand('git', ['checkout', 'main'], { throwOnNonZeroExit: true });

    // build the upstream branch
    await buildHugo();

    // remove public-upstream
    await common.removeIfExists('public-upstream');
    await fs.rename('public', 'public-upstream');

    // checkout -
    await common.runCommand('git', ['checkout', '-'], { throwOnNonZeroExit: true });

    // build the current branch
    await buildHugo();

    // diff public-upstream public to diff.txt
    const diffFile = await fs.open('public/diff.txt', 'w');
    await common.runCommand('diff', ['--recursive', '--unified', '--new-file', 'public-upstream', 'public'], {
      onStdout: (data) => diffFile.write(data),
    });
    await diffFile.close();

    // remove public-upstream
    await common.removeIfExists('public-upstream');
  } else {
    await buildHugo();
  }

  await buildSearch();
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
