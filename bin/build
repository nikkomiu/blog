#!/usr/bin/env node

const common = require('./common');
const fs = require('fs').promises;

async function buildHugo() {
  const extraArgs = '--enableGitInfo --minify --cleanDestinationDir'.split(' ');

  if (process.env.BUILD_DRAFTS === 'true') {
    console.log(`Building with drafts: ${process.env.WITH_DRAFTS}\n`.yellow)
    extraArgs.push('--buildDrafts');
    extraArgs.push('--environment', 'staging');
  }

  if (process.env.BUILD_FUTURES === 'true') {
    extraArgs.push('--buildFuture');
  }

  if (!!process.env.CF_PAGES) {
    if (process.env.CF_PAGES_BRANCH === 'main') {
      extraArgs.push('--baseURL', 'https://blog.miu.guru/');
    } else if (process.env.CF_PAGES_URL) {
      extraArgs.push('--baseURL', process.env.CF_PAGES_URL);
    }
  }

  const [procName] = common.runProcess('hugo', extraArgs);

  await Promise.all([
    common.waitForProcess(procName),
    common.waitForFile('public/index.html'),
  ]);
}

async function buildSearch() {
  const [procName] = common.runProcess('pagefind', ['--site', 'public']);

  await Promise.all([
    common.waitForProcess(procName),
    common.waitForFile('public/pagefind/pagefind.js'),
  ]);
}

async function main() {
  if (process.argv.includes('--diff')) {
    // checkout master
    const gitExitCode = await common.runCommand('git', ['checkout', 'main']);
    if (gitExitCode !== 0) {
      throw new Error('Failed to checkout the previous branch');
    }

    // build the upstream branch
    await buildHugo();

    // remove public-upstream
    await common.removeIfExists('public-upstream');
    await fs.rename('public', 'public-upstream');

    // checkout -
    gitExitCode = await common.runCommand('git', ['checkout', '-']);
    if (gitExitCode !== 0) {
      throw new Error('Failed to checkout the previous branch');
    }

    // build the current branch
    await buildHugo();

    // diff public-upstream public
    await common.runCommand('diff', ['--recursive', '--unified', '--new-file', 'public-upstream', 'public']);
  } else {
    await buildHugo();
  }

  await buildSearch();
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});
