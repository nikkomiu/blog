#!/usr/bin/env node

const { promises: fs } = require('fs')
const common = require('./common');
const package = require('../package.json')

const listenPort = package?.config?.port || 4280;

async function startHugo() {

  let hugoArgs = ['--appendPort=false'];
  if (process.env.CODESPACE_NAME) {
    hugoArgs.push('--baseURL', `https://${process.env.CODESPACE_NAME}-${listenPort}.githubpreview.dev/`)
  } else {
    hugoArgs.push('--baseURL', `http://localhost:${listenPort}/`)
  }

  // Delete public folder (Hugo generated files)
  await fs.rm('public', { recursive: true }).catch(() => { });

  // Start Hugo dev server
  const [procName] = common.runProcess('npm', ['run', 'start:hugo', '--', ...hugoArgs])

  // Wait for Hugo initial output to complete or Hugo to exit
  await Promise.race([
    common.waitForProcess(procName, { throw: true }),
    common.waitForFile('public/index.html', { postTimeout: 500 }),
  ]);
}

async function startSearch() {
  // Start Pagefind dev server
  const [procName] = common.runProcess('npm', ['run', 'start:search'])

  // TODO: listen for rebuild on Hugo instead to manually trigger a rebuild of pagefind

  // Wait for the Pagefine initial output to complete
  await Promise.race([
    common.waitForProcess(procName, { throw: true }),
    common.waitForFile('public/_pagefind/pagefind.js'),
  ]);
}

async function startAPI() {
  common.runProcess('npm', ['run', 'start:api', '--', '-p', `${listenPort}`])
}

async function main() {
  await common.runTailwind({ watch: true });
  await startHugo();
  await common.loadManualCSS();
  await startSearch();
  await startAPI();

  await common.waitForAnyProcess();
  common.killAllProcesses();
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
})
