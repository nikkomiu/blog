#!/usr/bin/env node

const { promises: fs } = require('fs')
const common = require('./common');

const listenPort = 1313;

const defaultHugoArgs = 'server --watch --minify --disableFastRender --enableGitInfo --cleanDestinationDir --destination public --appendPort=false';

async function startHugo() {
  let hugoArgs = defaultHugoArgs.split(' ');
  process.argv.indexOf('--draft') !== -1 && hugoArgs.push('--buildDrafts', listenPort.toString());
  process.argv.indexOf('--future') !== -1 && hugoArgs.push('--buildFuture', listenPort.toString());
  process.argv.indexOf('--staging') !== -1 && hugoArgs.push('--environment', 'staging');

  if (process.env.CODESPACE_NAME) {
    hugoArgs.push('--baseURL', `https://${process.env.CODESPACE_NAME}-${listenPort}.githubpreview.dev/`)
  } else {
    hugoArgs.push('--baseURL', `http://localhost:${listenPort}/`)
  }

  // Delete public folder (Hugo generated files)
  await fs.rm('public', { recursive: true }).catch(() => { });

  // Start Hugo dev server
  const [procName] = common.runProcess('hugo', hugoArgs);

  // Wait for Hugo initial output to complete or Hugo to exit
  await Promise.race([
    common.waitForProcess(procName, { throw: true }),
    common.waitForFile('public/index.html', { postTimeout: 500 }),
  ]);
}

async function startSearch() {
  // Start Pagefind dev server
  const [procName] = common.runProcess('pagefind', ['--site', 'public'], { ignoreProcess: true });

  // TODO: listen for rebuild on Hugo instead to manually trigger a rebuild of pagefind

  // Wait for the Pagefine initial output to complete
  await common.waitForFile('public/pagefind/pagefind.js');

  common.removeProcess(procName);
}

async function main() {
  await startHugo();
  await startSearch();

  await common.waitForAnyProcess();
  common.killAllProcesses();
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
})
